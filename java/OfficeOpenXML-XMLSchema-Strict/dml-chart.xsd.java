// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;

// CT_Boolean ...
public class CT_Boolean {
	@XmlAttribute(name = "val")
	protected Boolean ValAttr;
}

// CT_Double ...
public class CT_Double {
	@XmlAttribute(name = "val", required = true)
	protected Float ValAttr;
}

// CT_UnsignedInt ...
public class CT_UnsignedInt {
	@XmlAttribute(name = "val", required = true)
	protected Integer ValAttr;
}

// CT_RelId ...
public class CT_RelId {
	@XmlAttribute(name = "r:id", required = true)
	protected String RIdAttr;
}

// CT_Extension ...
public class CT_Extension {
	@XmlAttribute(name = "uri")
	protected String UriAttr;
}

// CT_ExtensionList ...
public class CT_ExtensionList {
	@XmlElement(required = true, name = "ext")
	protected List<CT_Extension> Ext;
}

// CT_NumVal ...
public class CT_NumVal {
	@XmlAttribute(name = "idx", required = true)
	protected Integer IdxAttr;
	@XmlAttribute(name = "formatCode")
	protected String FormatCodeAttr;
	@XmlElement(required = true, name = "v")
	protected String V;
}

// CT_NumData ...
public class CT_NumData {
	@XmlElement(required = true, name = "formatCode")
	protected String FormatCode;
	@XmlElement(required = true, name = "ptCount")
	protected CT_UnsignedInt PtCount;
	@XmlElement(required = true, name = "pt")
	protected List<CT_NumVal> Pt;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_NumRef ...
public class CT_NumRef {
	@XmlElement(required = true, name = "f")
	protected String F;
	@XmlElement(required = true, name = "numCache")
	protected CT_NumData NumCache;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_NumDataSource ...
public class CT_NumDataSource {
	@XmlElement(required = true, name = "numRef")
	protected CT_NumRef NumRef;
	@XmlElement(required = true, name = "numLit")
	protected CT_NumData NumLit;
}

// CT_StrVal ...
public class CT_StrVal {
	@XmlAttribute(name = "idx", required = true)
	protected Integer IdxAttr;
	@XmlElement(required = true, name = "v")
	protected String V;
}

// CT_StrData ...
public class CT_StrData {
	@XmlElement(required = true, name = "ptCount")
	protected CT_UnsignedInt PtCount;
	@XmlElement(required = true, name = "pt")
	protected List<CT_StrVal> Pt;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_StrRef ...
public class CT_StrRef {
	@XmlElement(required = true, name = "f")
	protected String F;
	@XmlElement(required = true, name = "strCache")
	protected CT_StrData StrCache;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Tx ...
public class CT_Tx {
	@XmlElement(required = true, name = "strRef")
	protected CT_StrRef StrRef;
	@XmlElement(required = true, name = "rich")
	protected CT_TextBody Rich;
}

// CT_TextLanguageID ...
public class CT_TextLanguageID {
	@XmlAttribute(name = "val", required = true)
	protected String ValAttr;
}

// CT_Lvl ...
public class CT_Lvl {
	@XmlElement(required = true, name = "pt")
	protected List<CT_StrVal> Pt;
}

// CT_MultiLvlStrData ...
public class CT_MultiLvlStrData {
	@XmlElement(required = true, name = "ptCount")
	protected CT_UnsignedInt PtCount;
	@XmlElement(required = true, name = "lvl")
	protected List<CT_Lvl> Lvl;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_MultiLvlStrRef ...
public class CT_MultiLvlStrRef {
	@XmlElement(required = true, name = "f")
	protected String F;
	@XmlElement(required = true, name = "multiLvlStrCache")
	protected CT_MultiLvlStrData MultiLvlStrCache;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_AxDataSource ...
public class CT_AxDataSource {
	@XmlElement(required = true, name = "multiLvlStrRef")
	protected CT_MultiLvlStrRef MultiLvlStrRef;
	@XmlElement(required = true, name = "numRef")
	protected CT_NumRef NumRef;
	@XmlElement(required = true, name = "numLit")
	protected CT_NumData NumLit;
	@XmlElement(required = true, name = "strRef")
	protected CT_StrRef StrRef;
	@XmlElement(required = true, name = "strLit")
	protected CT_StrData StrLit;
}

// CT_SerTx ...
public class CT_SerTx {
	@XmlElement(required = true, name = "strRef")
	protected CT_StrRef StrRef;
	@XmlElement(required = true, name = "v")
	protected String V;
}

// ST_LayoutTarget ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LayoutTarget")
public class ST_LayoutTarget {
	protected String ST_LayoutTarget;
}

// CT_LayoutTarget ...
public class CT_LayoutTarget {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// ST_LayoutMode ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LayoutMode")
public class ST_LayoutMode {
	protected String ST_LayoutMode;
}

// CT_LayoutMode ...
public class CT_LayoutMode {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// CT_ManualLayout ...
public class CT_ManualLayout {
	@XmlElement(required = true, name = "layoutTarget")
	protected CT_LayoutTarget LayoutTarget;
	@XmlElement(required = true, name = "xMode")
	protected CT_LayoutMode XMode;
	@XmlElement(required = true, name = "yMode")
	protected CT_LayoutMode YMode;
	@XmlElement(required = true, name = "wMode")
	protected CT_LayoutMode WMode;
	@XmlElement(required = true, name = "hMode")
	protected CT_LayoutMode HMode;
	@XmlElement(required = true, name = "x")
	protected CT_Double X;
	@XmlElement(required = true, name = "y")
	protected CT_Double Y;
	@XmlElement(required = true, name = "w")
	protected CT_Double W;
	@XmlElement(required = true, name = "h")
	protected CT_Double H;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Layout ...
public class CT_Layout {
	@XmlElement(required = true, name = "manualLayout")
	protected CT_ManualLayout ManualLayout;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Title ...
public class CT_Title {
	@XmlElement(required = true, name = "tx")
	protected CT_Tx Tx;
	@XmlElement(required = true, name = "layout")
	protected CT_Layout Layout;
	@XmlElement(required = true, name = "overlay")
	protected CT_Boolean Overlay;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "txPr")
	protected CT_TextBody TxPr;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_RotX ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_RotX")
public class ST_RotX {
	protected Byte ST_RotX;
}

// CT_RotX ...
public class CT_RotX {
	@XmlAttribute(name = "val")
	protected Byte ValAttr;
}

// ST_HPercent ...
public class ST_HPercent {
	@XmlElement(required = true)
	protected ST_HPercentWithSymbol ST_HPercentWithSymbol;
}

// ST_HPercentWithSymbol ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_HPercentWithSymbol")
public class ST_HPercentWithSymbol {
	protected String ST_HPercentWithSymbol;
}

// CT_HPercent ...
public class CT_HPercent {
	@XmlAttribute(name = "val")
	protected ST_HPercent ValAttr;
}

// ST_RotY ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_RotY")
public class ST_RotY {
	protected Short ST_RotY;
}

// CT_RotY ...
public class CT_RotY {
	@XmlAttribute(name = "val")
	protected Short ValAttr;
}

// ST_DepthPercent ...
public class ST_DepthPercent {
	@XmlElement(required = true)
	protected ST_DepthPercentWithSymbol ST_DepthPercentWithSymbol;
}

// ST_DepthPercentWithSymbol ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DepthPercentWithSymbol")
public class ST_DepthPercentWithSymbol {
	protected String ST_DepthPercentWithSymbol;
}

// CT_DepthPercent ...
public class CT_DepthPercent {
	@XmlAttribute(name = "val")
	protected ST_DepthPercent ValAttr;
}

// ST_Perspective ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Perspective")
public class ST_Perspective {
	protected Byte ST_Perspective;
}

// CT_Perspective ...
public class CT_Perspective {
	@XmlAttribute(name = "val")
	protected Byte ValAttr;
}

// CT_View3D ...
public class CT_View3D {
	@XmlElement(required = true, name = "rotX")
	protected CT_RotX RotX;
	@XmlElement(required = true, name = "hPercent")
	protected CT_HPercent HPercent;
	@XmlElement(required = true, name = "rotY")
	protected CT_RotY RotY;
	@XmlElement(required = true, name = "depthPercent")
	protected CT_DepthPercent DepthPercent;
	@XmlElement(required = true, name = "rAngAx")
	protected CT_Boolean RAngAx;
	@XmlElement(required = true, name = "perspective")
	protected CT_Perspective Perspective;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Surface ...
public class CT_Surface {
	@XmlElement(required = true, name = "thickness")
	protected CT_Thickness Thickness;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "pictureOptions")
	protected CT_PictureOptions PictureOptions;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_Thickness ...
public class ST_Thickness {
	@XmlElement(required = true)
	protected ST_ThicknessPercent ST_ThicknessPercent;
}

// ST_ThicknessPercent ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ThicknessPercent")
public class ST_ThicknessPercent {
	protected String ST_ThicknessPercent;
}

// CT_Thickness ...
public class CT_Thickness {
	@XmlAttribute(name = "val", required = true)
	protected ST_Thickness ValAttr;
}

// CT_DTable ...
public class CT_DTable {
	@XmlElement(required = true, name = "showHorzBorder")
	protected CT_Boolean ShowHorzBorder;
	@XmlElement(required = true, name = "showVertBorder")
	protected CT_Boolean ShowVertBorder;
	@XmlElement(required = true, name = "showOutline")
	protected CT_Boolean ShowOutline;
	@XmlElement(required = true, name = "showKeys")
	protected CT_Boolean ShowKeys;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "txPr")
	protected CT_TextBody TxPr;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_GapAmount ...
public class ST_GapAmount {
	@XmlElement(required = true)
	protected ST_GapAmountPercent ST_GapAmountPercent;
}

// ST_GapAmountPercent ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_GapAmountPercent")
public class ST_GapAmountPercent {
	protected String ST_GapAmountPercent;
}

// CT_GapAmount ...
public class CT_GapAmount {
	@XmlAttribute(name = "val")
	protected ST_GapAmount ValAttr;
}

// ST_Overlap ...
public class ST_Overlap {
	@XmlElement(required = true)
	protected ST_OverlapPercent ST_OverlapPercent;
}

// ST_OverlapPercent ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_OverlapPercent")
public class ST_OverlapPercent {
	protected String ST_OverlapPercent;
}

// CT_Overlap ...
public class CT_Overlap {
	@XmlAttribute(name = "val")
	protected ST_Overlap ValAttr;
}

// ST_BubbleScale ...
public class ST_BubbleScale {
	@XmlElement(required = true)
	protected ST_BubbleScalePercent ST_BubbleScalePercent;
}

// ST_BubbleScalePercent ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_BubbleScalePercent")
public class ST_BubbleScalePercent {
	protected String ST_BubbleScalePercent;
}

// CT_BubbleScale ...
public class CT_BubbleScale {
	@XmlAttribute(name = "val")
	protected ST_BubbleScale ValAttr;
}

// ST_SizeRepresents ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SizeRepresents")
public class ST_SizeRepresents {
	protected String ST_SizeRepresents;
}

// CT_SizeRepresents ...
public class CT_SizeRepresents {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// ST_FirstSliceAng ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FirstSliceAng")
public class ST_FirstSliceAng {
	protected Short ST_FirstSliceAng;
}

// CT_FirstSliceAng ...
public class CT_FirstSliceAng {
	@XmlAttribute(name = "val")
	protected Short ValAttr;
}

// ST_HoleSize ...
public class ST_HoleSize {
	@XmlElement(required = true)
	protected ST_HoleSizePercent ST_HoleSizePercent;
}

// ST_HoleSizePercent ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_HoleSizePercent")
public class ST_HoleSizePercent {
	protected String ST_HoleSizePercent;
}

// CT_HoleSize ...
public class CT_HoleSize {
	@XmlAttribute(name = "val")
	protected ST_HoleSize ValAttr;
}

// ST_SplitType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SplitType")
public class ST_SplitType {
	protected String ST_SplitType;
}

// CT_SplitType ...
public class CT_SplitType {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// CT_CustSplit ...
public class CT_CustSplit {
	@XmlElement(required = true, name = "secondPiePt")
	protected List<CT_UnsignedInt> SecondPiePt;
}

// ST_SecondPieSize ...
public class ST_SecondPieSize {
	@XmlElement(required = true)
	protected ST_SecondPieSizePercent ST_SecondPieSizePercent;
}

// ST_SecondPieSizePercent ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SecondPieSizePercent")
public class ST_SecondPieSizePercent {
	protected String ST_SecondPieSizePercent;
}

// CT_SecondPieSize ...
public class CT_SecondPieSize {
	@XmlAttribute(name = "val")
	protected ST_SecondPieSize ValAttr;
}

// CT_NumFmt ...
public class CT_NumFmt {
	@XmlAttribute(name = "formatCode", required = true)
	protected String FormatCodeAttr;
	@XmlAttribute(name = "sourceLinked")
	protected Boolean SourceLinkedAttr;
}

// ST_LblAlgn ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LblAlgn")
public class ST_LblAlgn {
	protected String ST_LblAlgn;
}

// CT_LblAlgn ...
public class CT_LblAlgn {
	@XmlAttribute(name = "val", required = true)
	protected String ValAttr;
}

// ST_DLblPos ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DLblPos")
public class ST_DLblPos {
	protected String ST_DLblPos;
}

// CT_DLblPos ...
public class CT_DLblPos {
	@XmlAttribute(name = "val", required = true)
	protected String ValAttr;
}

// EG_DLblShared ...
public class EG_DLblShared {
	@XmlElement(required = true, name = "numFmt")
	protected CT_NumFmt NumFmt;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "txPr")
	protected CT_TextBody TxPr;
	@XmlElement(required = true, name = "dLblPos")
	protected CT_DLblPos DLblPos;
	@XmlElement(required = true, name = "showLegendKey")
	protected CT_Boolean ShowLegendKey;
	@XmlElement(required = true, name = "showVal")
	protected CT_Boolean ShowVal;
	@XmlElement(required = true, name = "showCatName")
	protected CT_Boolean ShowCatName;
	@XmlElement(required = true, name = "showSerName")
	protected CT_Boolean ShowSerName;
	@XmlElement(required = true, name = "showPercent")
	protected CT_Boolean ShowPercent;
	@XmlElement(required = true, name = "showBubbleSize")
	protected CT_Boolean ShowBubbleSize;
	@XmlElement(required = true, name = "separator")
	protected String Separator;
}

// Group_DLbl ...
public class Group_DLbl {
	@XmlElement(required = true, name = "layout")
	protected CT_Layout Layout;
	@XmlElement(required = true, name = "tx")
	protected CT_Tx Tx;
	protected List<EG_DLblShared> EG_DLblShared;
}

// CT_DLbl ...
public class CT_DLbl {
	protected List<Group_DLbl> Group_DLbl;
	@XmlElement(required = true, name = "idx")
	protected CT_UnsignedInt Idx;
	@XmlElement(required = true, name = "delete")
	protected CT_Boolean Delete;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// Group_DLbls ...
public class Group_DLbls {
	@XmlElement(required = true, name = "showLeaderLines")
	protected CT_Boolean ShowLeaderLines;
	@XmlElement(required = true, name = "leaderLines")
	protected CT_ChartLines LeaderLines;
	protected List<EG_DLblShared> EG_DLblShared;
}

// CT_DLbls ...
public class CT_DLbls {
	protected List<Group_DLbls> Group_DLbls;
	@XmlElement(required = true, name = "dLbl")
	protected List<CT_DLbl> DLbl;
	@XmlElement(required = true, name = "delete")
	protected CT_Boolean Delete;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_MarkerStyle ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_MarkerStyle")
public class ST_MarkerStyle {
	protected String ST_MarkerStyle;
}

// CT_MarkerStyle ...
public class CT_MarkerStyle {
	@XmlAttribute(name = "val", required = true)
	protected String ValAttr;
}

// ST_MarkerSize ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_MarkerSize")
public class ST_MarkerSize {
	protected Byte ST_MarkerSize;
}

// CT_MarkerSize ...
public class CT_MarkerSize {
	@XmlAttribute(name = "val")
	protected Byte ValAttr;
}

// CT_Marker ...
public class CT_Marker {
	@XmlElement(required = true, name = "symbol")
	protected CT_MarkerStyle Symbol;
	@XmlElement(required = true, name = "size")
	protected CT_MarkerSize Size;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_DPt ...
public class CT_DPt {
	@XmlElement(required = true, name = "idx")
	protected CT_UnsignedInt Idx;
	@XmlElement(required = true, name = "invertIfNegative")
	protected CT_Boolean InvertIfNegative;
	@XmlElement(required = true, name = "marker")
	protected CT_Marker Marker;
	@XmlElement(required = true, name = "bubble3D")
	protected CT_Boolean Bubble3D;
	@XmlElement(required = true, name = "explosion")
	protected CT_UnsignedInt Explosion;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "pictureOptions")
	protected CT_PictureOptions PictureOptions;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_TrendlineType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TrendlineType")
public class ST_TrendlineType {
	protected String ST_TrendlineType;
}

// CT_TrendlineType ...
public class CT_TrendlineType {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// ST_Order ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Order")
public class ST_Order {
	protected Byte ST_Order;
}

// CT_Order ...
public class CT_Order {
	@XmlAttribute(name = "val")
	protected Byte ValAttr;
}

// ST_Period ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Period")
public class ST_Period {
	protected Integer ST_Period;
}

// CT_Period ...
public class CT_Period {
	@XmlAttribute(name = "val")
	protected Integer ValAttr;
}

// CT_TrendlineLbl ...
public class CT_TrendlineLbl {
	@XmlElement(required = true, name = "layout")
	protected CT_Layout Layout;
	@XmlElement(required = true, name = "tx")
	protected CT_Tx Tx;
	@XmlElement(required = true, name = "numFmt")
	protected CT_NumFmt NumFmt;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "txPr")
	protected CT_TextBody TxPr;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Trendline ...
public class CT_Trendline {
	@XmlElement(required = true, name = "name")
	protected String Name;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "trendlineType")
	protected CT_TrendlineType TrendlineType;
	@XmlElement(required = true, name = "order")
	protected CT_Order Order;
	@XmlElement(required = true, name = "period")
	protected CT_Period Period;
	@XmlElement(required = true, name = "forward")
	protected CT_Double Forward;
	@XmlElement(required = true, name = "backward")
	protected CT_Double Backward;
	@XmlElement(required = true, name = "intercept")
	protected CT_Double Intercept;
	@XmlElement(required = true, name = "dispRSqr")
	protected CT_Boolean DispRSqr;
	@XmlElement(required = true, name = "dispEq")
	protected CT_Boolean DispEq;
	@XmlElement(required = true, name = "trendlineLbl")
	protected CT_TrendlineLbl TrendlineLbl;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_ErrDir ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ErrDir")
public class ST_ErrDir {
	protected String ST_ErrDir;
}

// CT_ErrDir ...
public class CT_ErrDir {
	@XmlAttribute(name = "val", required = true)
	protected String ValAttr;
}

// ST_ErrBarType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ErrBarType")
public class ST_ErrBarType {
	protected String ST_ErrBarType;
}

// CT_ErrBarType ...
public class CT_ErrBarType {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// ST_ErrValType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ErrValType")
public class ST_ErrValType {
	protected String ST_ErrValType;
}

// CT_ErrValType ...
public class CT_ErrValType {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// CT_ErrBars ...
public class CT_ErrBars {
	@XmlElement(required = true, name = "errDir")
	protected CT_ErrDir ErrDir;
	@XmlElement(required = true, name = "errBarType")
	protected CT_ErrBarType ErrBarType;
	@XmlElement(required = true, name = "errValType")
	protected CT_ErrValType ErrValType;
	@XmlElement(required = true, name = "noEndCap")
	protected CT_Boolean NoEndCap;
	@XmlElement(required = true, name = "plus")
	protected CT_NumDataSource Plus;
	@XmlElement(required = true, name = "minus")
	protected CT_NumDataSource Minus;
	@XmlElement(required = true, name = "val")
	protected CT_Double Val;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_UpDownBar ...
public class CT_UpDownBar {
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
}

// CT_UpDownBars ...
public class CT_UpDownBars {
	@XmlElement(required = true, name = "gapWidth")
	protected CT_GapAmount GapWidth;
	@XmlElement(required = true, name = "upBars")
	protected CT_UpDownBar UpBars;
	@XmlElement(required = true, name = "downBars")
	protected CT_UpDownBar DownBars;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// EG_SerShared ...
public class EG_SerShared {
	@XmlElement(required = true, name = "idx")
	protected CT_UnsignedInt Idx;
	@XmlElement(required = true, name = "order")
	protected CT_UnsignedInt Order;
	@XmlElement(required = true, name = "tx")
	protected CT_SerTx Tx;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
}

// CT_LineSer ...
public class CT_LineSer {
	protected List<EG_SerShared> EG_SerShared;
	@XmlElement(required = true, name = "marker")
	protected CT_Marker Marker;
	@XmlElement(required = true, name = "dPt")
	protected List<CT_DPt> DPt;
	@XmlElement(required = true, name = "dLbls")
	protected CT_DLbls DLbls;
	@XmlElement(required = true, name = "trendline")
	protected List<CT_Trendline> Trendline;
	@XmlElement(required = true, name = "errBars")
	protected CT_ErrBars ErrBars;
	@XmlElement(required = true, name = "cat")
	protected CT_AxDataSource Cat;
	@XmlElement(required = true, name = "val")
	protected CT_NumDataSource Val;
	@XmlElement(required = true, name = "smooth")
	protected CT_Boolean Smooth;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_ScatterSer ...
public class CT_ScatterSer {
	protected List<EG_SerShared> EG_SerShared;
	@XmlElement(required = true, name = "marker")
	protected CT_Marker Marker;
	@XmlElement(required = true, name = "dPt")
	protected List<CT_DPt> DPt;
	@XmlElement(required = true, name = "dLbls")
	protected CT_DLbls DLbls;
	@XmlElement(required = true, name = "trendline")
	protected List<CT_Trendline> Trendline;
	@XmlElement(required = true, name = "errBars")
	protected List<CT_ErrBars> ErrBars;
	@XmlElement(required = true, name = "xVal")
	protected CT_AxDataSource XVal;
	@XmlElement(required = true, name = "yVal")
	protected CT_NumDataSource YVal;
	@XmlElement(required = true, name = "smooth")
	protected CT_Boolean Smooth;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_RadarSer ...
public class CT_RadarSer {
	protected List<EG_SerShared> EG_SerShared;
	@XmlElement(required = true, name = "marker")
	protected CT_Marker Marker;
	@XmlElement(required = true, name = "dPt")
	protected List<CT_DPt> DPt;
	@XmlElement(required = true, name = "dLbls")
	protected CT_DLbls DLbls;
	@XmlElement(required = true, name = "cat")
	protected CT_AxDataSource Cat;
	@XmlElement(required = true, name = "val")
	protected CT_NumDataSource Val;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_BarSer ...
public class CT_BarSer {
	protected List<EG_SerShared> EG_SerShared;
	@XmlElement(required = true, name = "invertIfNegative")
	protected CT_Boolean InvertIfNegative;
	@XmlElement(required = true, name = "pictureOptions")
	protected CT_PictureOptions PictureOptions;
	@XmlElement(required = true, name = "dPt")
	protected List<CT_DPt> DPt;
	@XmlElement(required = true, name = "dLbls")
	protected CT_DLbls DLbls;
	@XmlElement(required = true, name = "trendline")
	protected List<CT_Trendline> Trendline;
	@XmlElement(required = true, name = "errBars")
	protected CT_ErrBars ErrBars;
	@XmlElement(required = true, name = "cat")
	protected CT_AxDataSource Cat;
	@XmlElement(required = true, name = "val")
	protected CT_NumDataSource Val;
	@XmlElement(required = true, name = "shape")
	protected CT_Shape Shape;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_AreaSer ...
public class CT_AreaSer {
	protected List<EG_SerShared> EG_SerShared;
	@XmlElement(required = true, name = "pictureOptions")
	protected CT_PictureOptions PictureOptions;
	@XmlElement(required = true, name = "dPt")
	protected List<CT_DPt> DPt;
	@XmlElement(required = true, name = "dLbls")
	protected CT_DLbls DLbls;
	@XmlElement(required = true, name = "trendline")
	protected List<CT_Trendline> Trendline;
	@XmlElement(required = true, name = "errBars")
	protected List<CT_ErrBars> ErrBars;
	@XmlElement(required = true, name = "cat")
	protected CT_AxDataSource Cat;
	@XmlElement(required = true, name = "val")
	protected CT_NumDataSource Val;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_PieSer ...
public class CT_PieSer {
	protected List<EG_SerShared> EG_SerShared;
	@XmlElement(required = true, name = "explosion")
	protected CT_UnsignedInt Explosion;
	@XmlElement(required = true, name = "dPt")
	protected List<CT_DPt> DPt;
	@XmlElement(required = true, name = "dLbls")
	protected CT_DLbls DLbls;
	@XmlElement(required = true, name = "cat")
	protected CT_AxDataSource Cat;
	@XmlElement(required = true, name = "val")
	protected CT_NumDataSource Val;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_BubbleSer ...
public class CT_BubbleSer {
	protected List<EG_SerShared> EG_SerShared;
	@XmlElement(required = true, name = "invertIfNegative")
	protected CT_Boolean InvertIfNegative;
	@XmlElement(required = true, name = "dPt")
	protected List<CT_DPt> DPt;
	@XmlElement(required = true, name = "dLbls")
	protected CT_DLbls DLbls;
	@XmlElement(required = true, name = "trendline")
	protected List<CT_Trendline> Trendline;
	@XmlElement(required = true, name = "errBars")
	protected List<CT_ErrBars> ErrBars;
	@XmlElement(required = true, name = "xVal")
	protected CT_AxDataSource XVal;
	@XmlElement(required = true, name = "yVal")
	protected CT_NumDataSource YVal;
	@XmlElement(required = true, name = "bubbleSize")
	protected CT_NumDataSource BubbleSize;
	@XmlElement(required = true, name = "bubble3D")
	protected CT_Boolean Bubble3D;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_SurfaceSer ...
public class CT_SurfaceSer {
	protected List<EG_SerShared> EG_SerShared;
	@XmlElement(required = true, name = "cat")
	protected CT_AxDataSource Cat;
	@XmlElement(required = true, name = "val")
	protected CT_NumDataSource Val;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_Grouping ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Grouping")
public class ST_Grouping {
	protected String ST_Grouping;
}

// CT_Grouping ...
public class CT_Grouping {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// CT_ChartLines ...
public class CT_ChartLines {
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
}

// EG_LineChartShared ...
public class EG_LineChartShared {
	@XmlElement(required = true, name = "grouping")
	protected CT_Grouping Grouping;
	@XmlElement(required = true, name = "varyColors")
	protected CT_Boolean VaryColors;
	@XmlElement(required = true, name = "ser")
	protected List<CT_LineSer> Ser;
	@XmlElement(required = true, name = "dLbls")
	protected CT_DLbls DLbls;
	@XmlElement(required = true, name = "dropLines")
	protected CT_ChartLines DropLines;
}

// CT_LineChart ...
public class CT_LineChart {
	protected List<EG_LineChartShared> EG_LineChartShared;
	@XmlElement(required = true, name = "hiLowLines")
	protected CT_ChartLines HiLowLines;
	@XmlElement(required = true, name = "upDownBars")
	protected CT_UpDownBars UpDownBars;
	@XmlElement(required = true, name = "marker")
	protected CT_Boolean Marker;
	@XmlElement(required = true, name = "smooth")
	protected CT_Boolean Smooth;
	@XmlElement(required = true, name = "axId")
	protected List<CT_UnsignedInt> AxId;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Line3DChart ...
public class CT_Line3DChart {
	protected List<EG_LineChartShared> EG_LineChartShared;
	@XmlElement(required = true, name = "gapDepth")
	protected CT_GapAmount GapDepth;
	@XmlElement(required = true, name = "axId")
	protected List<CT_UnsignedInt> AxId;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_StockChart ...
public class CT_StockChart {
	@XmlElement(required = true, name = "ser")
	protected List<CT_LineSer> Ser;
	@XmlElement(required = true, name = "dLbls")
	protected CT_DLbls DLbls;
	@XmlElement(required = true, name = "dropLines")
	protected CT_ChartLines DropLines;
	@XmlElement(required = true, name = "hiLowLines")
	protected CT_ChartLines HiLowLines;
	@XmlElement(required = true, name = "upDownBars")
	protected CT_UpDownBars UpDownBars;
	@XmlElement(required = true, name = "axId")
	protected List<CT_UnsignedInt> AxId;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_ScatterStyle ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ScatterStyle")
public class ST_ScatterStyle {
	protected String ST_ScatterStyle;
}

// CT_ScatterStyle ...
public class CT_ScatterStyle {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// CT_ScatterChart ...
public class CT_ScatterChart {
	@XmlElement(required = true, name = "scatterStyle")
	protected CT_ScatterStyle ScatterStyle;
	@XmlElement(required = true, name = "varyColors")
	protected CT_Boolean VaryColors;
	@XmlElement(required = true, name = "ser")
	protected List<CT_ScatterSer> Ser;
	@XmlElement(required = true, name = "dLbls")
	protected CT_DLbls DLbls;
	@XmlElement(required = true, name = "axId")
	protected List<CT_UnsignedInt> AxId;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_RadarStyle ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_RadarStyle")
public class ST_RadarStyle {
	protected String ST_RadarStyle;
}

// CT_RadarStyle ...
public class CT_RadarStyle {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// CT_RadarChart ...
public class CT_RadarChart {
	@XmlElement(required = true, name = "radarStyle")
	protected CT_RadarStyle RadarStyle;
	@XmlElement(required = true, name = "varyColors")
	protected CT_Boolean VaryColors;
	@XmlElement(required = true, name = "ser")
	protected List<CT_RadarSer> Ser;
	@XmlElement(required = true, name = "dLbls")
	protected CT_DLbls DLbls;
	@XmlElement(required = true, name = "axId")
	protected List<CT_UnsignedInt> AxId;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_BarGrouping ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_BarGrouping")
public class ST_BarGrouping {
	protected String ST_BarGrouping;
}

// CT_BarGrouping ...
public class CT_BarGrouping {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// ST_BarDir ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_BarDir")
public class ST_BarDir {
	protected String ST_BarDir;
}

// CT_BarDir ...
public class CT_BarDir {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// ST_Shape ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Shape")
public class ST_Shape {
	protected String ST_Shape;
}

// CT_Shape ...
public class CT_Shape {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// EG_BarChartShared ...
public class EG_BarChartShared {
	@XmlElement(required = true, name = "barDir")
	protected CT_BarDir BarDir;
	@XmlElement(required = true, name = "grouping")
	protected CT_BarGrouping Grouping;
	@XmlElement(required = true, name = "varyColors")
	protected CT_Boolean VaryColors;
	@XmlElement(required = true, name = "ser")
	protected List<CT_BarSer> Ser;
	@XmlElement(required = true, name = "dLbls")
	protected CT_DLbls DLbls;
}

// CT_BarChart ...
public class CT_BarChart {
	protected List<EG_BarChartShared> EG_BarChartShared;
	@XmlElement(required = true, name = "gapWidth")
	protected CT_GapAmount GapWidth;
	@XmlElement(required = true, name = "overlap")
	protected CT_Overlap Overlap;
	@XmlElement(required = true, name = "serLines")
	protected List<CT_ChartLines> SerLines;
	@XmlElement(required = true, name = "axId")
	protected List<CT_UnsignedInt> AxId;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Bar3DChart ...
public class CT_Bar3DChart {
	protected List<EG_BarChartShared> EG_BarChartShared;
	@XmlElement(required = true, name = "gapWidth")
	protected CT_GapAmount GapWidth;
	@XmlElement(required = true, name = "gapDepth")
	protected CT_GapAmount GapDepth;
	@XmlElement(required = true, name = "shape")
	protected CT_Shape Shape;
	@XmlElement(required = true, name = "axId")
	protected List<CT_UnsignedInt> AxId;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// EG_AreaChartShared ...
public class EG_AreaChartShared {
	@XmlElement(required = true, name = "grouping")
	protected CT_Grouping Grouping;
	@XmlElement(required = true, name = "varyColors")
	protected CT_Boolean VaryColors;
	@XmlElement(required = true, name = "ser")
	protected List<CT_AreaSer> Ser;
	@XmlElement(required = true, name = "dLbls")
	protected CT_DLbls DLbls;
	@XmlElement(required = true, name = "dropLines")
	protected CT_ChartLines DropLines;
}

// CT_AreaChart ...
public class CT_AreaChart {
	protected List<EG_AreaChartShared> EG_AreaChartShared;
	@XmlElement(required = true, name = "axId")
	protected List<CT_UnsignedInt> AxId;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Area3DChart ...
public class CT_Area3DChart {
	protected List<EG_AreaChartShared> EG_AreaChartShared;
	@XmlElement(required = true, name = "gapDepth")
	protected CT_GapAmount GapDepth;
	@XmlElement(required = true, name = "axId")
	protected List<CT_UnsignedInt> AxId;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// EG_PieChartShared ...
public class EG_PieChartShared {
	@XmlElement(required = true, name = "varyColors")
	protected CT_Boolean VaryColors;
	@XmlElement(required = true, name = "ser")
	protected List<CT_PieSer> Ser;
	@XmlElement(required = true, name = "dLbls")
	protected CT_DLbls DLbls;
}

// CT_PieChart ...
public class CT_PieChart {
	protected List<EG_PieChartShared> EG_PieChartShared;
	@XmlElement(required = true, name = "firstSliceAng")
	protected CT_FirstSliceAng FirstSliceAng;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Pie3DChart ...
public class CT_Pie3DChart {
	protected List<EG_PieChartShared> EG_PieChartShared;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_DoughnutChart ...
public class CT_DoughnutChart {
	protected List<EG_PieChartShared> EG_PieChartShared;
	@XmlElement(required = true, name = "firstSliceAng")
	protected CT_FirstSliceAng FirstSliceAng;
	@XmlElement(required = true, name = "holeSize")
	protected CT_HoleSize HoleSize;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_OfPieType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_OfPieType")
public class ST_OfPieType {
	protected String ST_OfPieType;
}

// CT_OfPieType ...
public class CT_OfPieType {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// CT_OfPieChart ...
public class CT_OfPieChart {
	protected List<EG_PieChartShared> EG_PieChartShared;
	@XmlElement(required = true, name = "ofPieType")
	protected CT_OfPieType OfPieType;
	@XmlElement(required = true, name = "gapWidth")
	protected CT_GapAmount GapWidth;
	@XmlElement(required = true, name = "splitType")
	protected CT_SplitType SplitType;
	@XmlElement(required = true, name = "splitPos")
	protected CT_Double SplitPos;
	@XmlElement(required = true, name = "custSplit")
	protected CT_CustSplit CustSplit;
	@XmlElement(required = true, name = "secondPieSize")
	protected CT_SecondPieSize SecondPieSize;
	@XmlElement(required = true, name = "serLines")
	protected List<CT_ChartLines> SerLines;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_BubbleChart ...
public class CT_BubbleChart {
	@XmlElement(required = true, name = "varyColors")
	protected CT_Boolean VaryColors;
	@XmlElement(required = true, name = "ser")
	protected List<CT_BubbleSer> Ser;
	@XmlElement(required = true, name = "dLbls")
	protected CT_DLbls DLbls;
	@XmlElement(required = true, name = "bubble3D")
	protected CT_Boolean Bubble3D;
	@XmlElement(required = true, name = "bubbleScale")
	protected CT_BubbleScale BubbleScale;
	@XmlElement(required = true, name = "showNegBubbles")
	protected CT_Boolean ShowNegBubbles;
	@XmlElement(required = true, name = "sizeRepresents")
	protected CT_SizeRepresents SizeRepresents;
	@XmlElement(required = true, name = "axId")
	protected List<CT_UnsignedInt> AxId;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_BandFmt ...
public class CT_BandFmt {
	@XmlElement(required = true, name = "idx")
	protected CT_UnsignedInt Idx;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
}

// CT_BandFmts ...
public class CT_BandFmts {
	@XmlElement(required = true, name = "bandFmt")
	protected List<CT_BandFmt> BandFmt;
}

// EG_SurfaceChartShared ...
public class EG_SurfaceChartShared {
	@XmlElement(required = true, name = "wireframe")
	protected CT_Boolean Wireframe;
	@XmlElement(required = true, name = "ser")
	protected List<CT_SurfaceSer> Ser;
	@XmlElement(required = true, name = "bandFmts")
	protected CT_BandFmts BandFmts;
}

// CT_SurfaceChart ...
public class CT_SurfaceChart {
	protected List<EG_SurfaceChartShared> EG_SurfaceChartShared;
	@XmlElement(required = true, name = "axId")
	protected List<CT_UnsignedInt> AxId;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Surface3DChart ...
public class CT_Surface3DChart {
	protected List<EG_SurfaceChartShared> EG_SurfaceChartShared;
	@XmlElement(required = true, name = "axId")
	protected List<CT_UnsignedInt> AxId;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_AxPos ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_AxPos")
public class ST_AxPos {
	protected String ST_AxPos;
}

// CT_AxPos ...
public class CT_AxPos {
	@XmlAttribute(name = "val", required = true)
	protected String ValAttr;
}

// ST_Crosses ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Crosses")
public class ST_Crosses {
	protected String ST_Crosses;
}

// CT_Crosses ...
public class CT_Crosses {
	@XmlAttribute(name = "val", required = true)
	protected String ValAttr;
}

// ST_CrossBetween ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CrossBetween")
public class ST_CrossBetween {
	protected String ST_CrossBetween;
}

// CT_CrossBetween ...
public class CT_CrossBetween {
	@XmlAttribute(name = "val", required = true)
	protected String ValAttr;
}

// ST_TickMark ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TickMark")
public class ST_TickMark {
	protected String ST_TickMark;
}

// CT_TickMark ...
public class CT_TickMark {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// ST_TickLblPos ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TickLblPos")
public class ST_TickLblPos {
	protected String ST_TickLblPos;
}

// CT_TickLblPos ...
public class CT_TickLblPos {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// ST_Skip ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Skip")
public class ST_Skip {
	protected Integer ST_Skip;
}

// CT_Skip ...
public class CT_Skip {
	@XmlAttribute(name = "val", required = true)
	protected Integer ValAttr;
}

// ST_TimeUnit ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TimeUnit")
public class ST_TimeUnit {
	protected String ST_TimeUnit;
}

// CT_TimeUnit ...
public class CT_TimeUnit {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// ST_AxisUnit ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_AxisUnit")
public class ST_AxisUnit {
	protected Float ST_AxisUnit;
}

// CT_AxisUnit ...
public class CT_AxisUnit {
	@XmlAttribute(name = "val", required = true)
	protected Float ValAttr;
}

// ST_BuiltInUnit ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_BuiltInUnit")
public class ST_BuiltInUnit {
	protected String ST_BuiltInUnit;
}

// CT_BuiltInUnit ...
public class CT_BuiltInUnit {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// ST_PictureFormat ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PictureFormat")
public class ST_PictureFormat {
	protected String ST_PictureFormat;
}

// CT_PictureFormat ...
public class CT_PictureFormat {
	@XmlAttribute(name = "val", required = true)
	protected String ValAttr;
}

// ST_PictureStackUnit ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PictureStackUnit")
public class ST_PictureStackUnit {
	protected Float ST_PictureStackUnit;
}

// CT_PictureStackUnit ...
public class CT_PictureStackUnit {
	@XmlAttribute(name = "val", required = true)
	protected Float ValAttr;
}

// CT_PictureOptions ...
public class CT_PictureOptions {
	@XmlElement(required = true, name = "applyToFront")
	protected CT_Boolean ApplyToFront;
	@XmlElement(required = true, name = "applyToSides")
	protected CT_Boolean ApplyToSides;
	@XmlElement(required = true, name = "applyToEnd")
	protected CT_Boolean ApplyToEnd;
	@XmlElement(required = true, name = "pictureFormat")
	protected CT_PictureFormat PictureFormat;
	@XmlElement(required = true, name = "pictureStackUnit")
	protected CT_PictureStackUnit PictureStackUnit;
}

// CT_DispUnitsLbl ...
public class CT_DispUnitsLbl {
	@XmlElement(required = true, name = "layout")
	protected CT_Layout Layout;
	@XmlElement(required = true, name = "tx")
	protected CT_Tx Tx;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "txPr")
	protected CT_TextBody TxPr;
}

// CT_DispUnits ...
public class CT_DispUnits {
	@XmlElement(required = true, name = "custUnit")
	protected CT_Double CustUnit;
	@XmlElement(required = true, name = "builtInUnit")
	protected CT_BuiltInUnit BuiltInUnit;
	@XmlElement(required = true, name = "dispUnitsLbl")
	protected CT_DispUnitsLbl DispUnitsLbl;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_Orientation ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Orientation")
public class ST_Orientation {
	protected String ST_Orientation;
}

// CT_Orientation ...
public class CT_Orientation {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// ST_LogBase ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LogBase")
public class ST_LogBase {
	protected Float ST_LogBase;
}

// CT_LogBase ...
public class CT_LogBase {
	@XmlAttribute(name = "val", required = true)
	protected Float ValAttr;
}

// CT_Scaling ...
public class CT_Scaling {
	@XmlElement(required = true, name = "logBase")
	protected CT_LogBase LogBase;
	@XmlElement(required = true, name = "orientation")
	protected CT_Orientation Orientation;
	@XmlElement(required = true, name = "max")
	protected CT_Double Max;
	@XmlElement(required = true, name = "min")
	protected CT_Double Min;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_LblOffset ...
public class ST_LblOffset {
	@XmlElement(required = true)
	protected ST_LblOffsetPercent ST_LblOffsetPercent;
}

// ST_LblOffsetPercent ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LblOffsetPercent")
public class ST_LblOffsetPercent {
	protected String ST_LblOffsetPercent;
}

// CT_LblOffset ...
public class CT_LblOffset {
	@XmlAttribute(name = "val")
	protected ST_LblOffset ValAttr;
}

// EG_AxShared ...
public class EG_AxShared {
	@XmlElement(required = true, name = "axId")
	protected CT_UnsignedInt AxId;
	@XmlElement(required = true, name = "scaling")
	protected CT_Scaling Scaling;
	@XmlElement(required = true, name = "delete")
	protected CT_Boolean Delete;
	@XmlElement(required = true, name = "axPos")
	protected CT_AxPos AxPos;
	@XmlElement(required = true, name = "majorGridlines")
	protected CT_ChartLines MajorGridlines;
	@XmlElement(required = true, name = "minorGridlines")
	protected CT_ChartLines MinorGridlines;
	@XmlElement(required = true, name = "title")
	protected CT_Title Title;
	@XmlElement(required = true, name = "numFmt")
	protected CT_NumFmt NumFmt;
	@XmlElement(required = true, name = "majorTickMark")
	protected CT_TickMark MajorTickMark;
	@XmlElement(required = true, name = "minorTickMark")
	protected CT_TickMark MinorTickMark;
	@XmlElement(required = true, name = "tickLblPos")
	protected CT_TickLblPos TickLblPos;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "txPr")
	protected CT_TextBody TxPr;
	@XmlElement(required = true, name = "crossAx")
	protected CT_UnsignedInt CrossAx;
	@XmlElement(required = true, name = "crosses")
	protected CT_Crosses Crosses;
	@XmlElement(required = true, name = "crossesAt")
	protected CT_Double CrossesAt;
}

// CT_CatAx ...
public class CT_CatAx {
	protected List<EG_AxShared> EG_AxShared;
	@XmlElement(required = true, name = "auto")
	protected CT_Boolean Auto;
	@XmlElement(required = true, name = "lblAlgn")
	protected CT_LblAlgn LblAlgn;
	@XmlElement(required = true, name = "lblOffset")
	protected CT_LblOffset LblOffset;
	@XmlElement(required = true, name = "tickLblSkip")
	protected CT_Skip TickLblSkip;
	@XmlElement(required = true, name = "tickMarkSkip")
	protected CT_Skip TickMarkSkip;
	@XmlElement(required = true, name = "noMultiLvlLbl")
	protected CT_Boolean NoMultiLvlLbl;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_DateAx ...
public class CT_DateAx {
	protected List<EG_AxShared> EG_AxShared;
	@XmlElement(required = true, name = "auto")
	protected CT_Boolean Auto;
	@XmlElement(required = true, name = "lblOffset")
	protected CT_LblOffset LblOffset;
	@XmlElement(required = true, name = "baseTimeUnit")
	protected CT_TimeUnit BaseTimeUnit;
	@XmlElement(required = true, name = "majorUnit")
	protected CT_AxisUnit MajorUnit;
	@XmlElement(required = true, name = "majorTimeUnit")
	protected CT_TimeUnit MajorTimeUnit;
	@XmlElement(required = true, name = "minorUnit")
	protected CT_AxisUnit MinorUnit;
	@XmlElement(required = true, name = "minorTimeUnit")
	protected CT_TimeUnit MinorTimeUnit;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_SerAx ...
public class CT_SerAx {
	protected List<EG_AxShared> EG_AxShared;
	@XmlElement(required = true, name = "tickLblSkip")
	protected CT_Skip TickLblSkip;
	@XmlElement(required = true, name = "tickMarkSkip")
	protected CT_Skip TickMarkSkip;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_ValAx ...
public class CT_ValAx {
	protected List<EG_AxShared> EG_AxShared;
	@XmlElement(required = true, name = "crossBetween")
	protected CT_CrossBetween CrossBetween;
	@XmlElement(required = true, name = "majorUnit")
	protected CT_AxisUnit MajorUnit;
	@XmlElement(required = true, name = "minorUnit")
	protected CT_AxisUnit MinorUnit;
	@XmlElement(required = true, name = "dispUnits")
	protected CT_DispUnits DispUnits;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_PlotArea ...
public class CT_PlotArea {
	@XmlElement(required = true, name = "layout")
	protected CT_Layout Layout;
	@XmlElement(required = true, name = "areaChart")
	protected List<CT_AreaChart> AreaChart;
	@XmlElement(required = true, name = "area3DChart")
	protected List<CT_Area3DChart> Area3DChart;
	@XmlElement(required = true, name = "lineChart")
	protected List<CT_LineChart> LineChart;
	@XmlElement(required = true, name = "line3DChart")
	protected List<CT_Line3DChart> Line3DChart;
	@XmlElement(required = true, name = "stockChart")
	protected List<CT_StockChart> StockChart;
	@XmlElement(required = true, name = "radarChart")
	protected List<CT_RadarChart> RadarChart;
	@XmlElement(required = true, name = "scatterChart")
	protected List<CT_ScatterChart> ScatterChart;
	@XmlElement(required = true, name = "pieChart")
	protected List<CT_PieChart> PieChart;
	@XmlElement(required = true, name = "pie3DChart")
	protected List<CT_Pie3DChart> Pie3DChart;
	@XmlElement(required = true, name = "doughnutChart")
	protected List<CT_DoughnutChart> DoughnutChart;
	@XmlElement(required = true, name = "barChart")
	protected List<CT_BarChart> BarChart;
	@XmlElement(required = true, name = "bar3DChart")
	protected List<CT_Bar3DChart> Bar3DChart;
	@XmlElement(required = true, name = "ofPieChart")
	protected List<CT_OfPieChart> OfPieChart;
	@XmlElement(required = true, name = "surfaceChart")
	protected List<CT_SurfaceChart> SurfaceChart;
	@XmlElement(required = true, name = "surface3DChart")
	protected List<CT_Surface3DChart> Surface3DChart;
	@XmlElement(required = true, name = "bubbleChart")
	protected List<CT_BubbleChart> BubbleChart;
	@XmlElement(required = true, name = "valAx")
	protected List<CT_ValAx> ValAx;
	@XmlElement(required = true, name = "catAx")
	protected List<CT_CatAx> CatAx;
	@XmlElement(required = true, name = "dateAx")
	protected List<CT_DateAx> DateAx;
	@XmlElement(required = true, name = "serAx")
	protected List<CT_SerAx> SerAx;
	@XmlElement(required = true, name = "dTable")
	protected CT_DTable DTable;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_PivotFmt ...
public class CT_PivotFmt {
	@XmlElement(required = true, name = "idx")
	protected CT_UnsignedInt Idx;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "txPr")
	protected CT_TextBody TxPr;
	@XmlElement(required = true, name = "marker")
	protected CT_Marker Marker;
	@XmlElement(required = true, name = "dLbl")
	protected CT_DLbl DLbl;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_PivotFmts ...
public class CT_PivotFmts {
	@XmlElement(required = true, name = "pivotFmt")
	protected List<CT_PivotFmt> PivotFmt;
}

// ST_LegendPos ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LegendPos")
public class ST_LegendPos {
	protected String ST_LegendPos;
}

// CT_LegendPos ...
public class CT_LegendPos {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// EG_LegendEntryData ...
public class EG_LegendEntryData {
	@XmlElement(required = true, name = "txPr")
	protected CT_TextBody TxPr;
}

// CT_LegendEntry ...
public class CT_LegendEntry {
	protected List<EG_LegendEntryData> EG_LegendEntryData;
	@XmlElement(required = true, name = "idx")
	protected CT_UnsignedInt Idx;
	@XmlElement(required = true, name = "delete")
	protected CT_Boolean Delete;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// CT_Legend ...
public class CT_Legend {
	@XmlElement(required = true, name = "legendPos")
	protected CT_LegendPos LegendPos;
	@XmlElement(required = true, name = "legendEntry")
	protected List<CT_LegendEntry> LegendEntry;
	@XmlElement(required = true, name = "layout")
	protected CT_Layout Layout;
	@XmlElement(required = true, name = "overlay")
	protected CT_Boolean Overlay;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "txPr")
	protected CT_TextBody TxPr;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_DispBlanksAs ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DispBlanksAs")
public class ST_DispBlanksAs {
	protected String ST_DispBlanksAs;
}

// CT_DispBlanksAs ...
public class CT_DispBlanksAs {
	@XmlAttribute(name = "val")
	protected String ValAttr;
}

// CT_Chart ...
public class CT_Chart {
	@XmlElement(required = true, name = "title")
	protected CT_Title Title;
	@XmlElement(required = true, name = "autoTitleDeleted")
	protected CT_Boolean AutoTitleDeleted;
	@XmlElement(required = true, name = "pivotFmts")
	protected CT_PivotFmts PivotFmts;
	@XmlElement(required = true, name = "view3D")
	protected CT_View3D View3D;
	@XmlElement(required = true, name = "floor")
	protected CT_Surface Floor;
	@XmlElement(required = true, name = "sideWall")
	protected CT_Surface SideWall;
	@XmlElement(required = true, name = "backWall")
	protected CT_Surface BackWall;
	@XmlElement(required = true, name = "plotArea")
	protected CT_PlotArea PlotArea;
	@XmlElement(required = true, name = "legend")
	protected CT_Legend Legend;
	@XmlElement(required = true, name = "plotVisOnly")
	protected CT_Boolean PlotVisOnly;
	@XmlElement(required = true, name = "dispBlanksAs")
	protected CT_DispBlanksAs DispBlanksAs;
	@XmlElement(required = true, name = "showDLblsOverMax")
	protected CT_Boolean ShowDLblsOverMax;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

// ST_Style ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Style")
public class ST_Style {
	protected Byte ST_Style;
}

// CT_Style ...
public class CT_Style {
	@XmlAttribute(name = "val", required = true)
	protected Byte ValAttr;
}

// CT_PivotSource ...
public class CT_PivotSource {
	@XmlElement(required = true, name = "name")
	protected String Name;
	@XmlElement(required = true, name = "fmtId")
	protected CT_UnsignedInt FmtId;
	@XmlElement(required = true, name = "extLst")
	protected List<CT_ExtensionList> ExtLst;
}

// CT_Protection ...
public class CT_Protection {
	@XmlElement(required = true, name = "chartObject")
	protected CT_Boolean ChartObject;
	@XmlElement(required = true, name = "data")
	protected CT_Boolean Data;
	@XmlElement(required = true, name = "formatting")
	protected CT_Boolean Formatting;
	@XmlElement(required = true, name = "selection")
	protected CT_Boolean Selection;
	@XmlElement(required = true, name = "userInterface")
	protected CT_Boolean UserInterface;
}

// CT_HeaderFooter ...
public class CT_HeaderFooter {
	@XmlAttribute(name = "alignWithMargins")
	protected Boolean AlignWithMarginsAttr;
	@XmlAttribute(name = "differentOddEven")
	protected Boolean DifferentOddEvenAttr;
	@XmlAttribute(name = "differentFirst")
	protected Boolean DifferentFirstAttr;
	@XmlElement(required = true, name = "oddHeader")
	protected String OddHeader;
	@XmlElement(required = true, name = "oddFooter")
	protected String OddFooter;
	@XmlElement(required = true, name = "evenHeader")
	protected String EvenHeader;
	@XmlElement(required = true, name = "evenFooter")
	protected String EvenFooter;
	@XmlElement(required = true, name = "firstHeader")
	protected String FirstHeader;
	@XmlElement(required = true, name = "firstFooter")
	protected String FirstFooter;
}

// CT_PageMargins ...
public class CT_PageMargins {
	@XmlAttribute(name = "l", required = true)
	protected Float LAttr;
	@XmlAttribute(name = "r", required = true)
	protected Float RAttr;
	@XmlAttribute(name = "t", required = true)
	protected Float TAttr;
	@XmlAttribute(name = "b", required = true)
	protected Float BAttr;
	@XmlAttribute(name = "header", required = true)
	protected Float HeaderAttr;
	@XmlAttribute(name = "footer", required = true)
	protected Float FooterAttr;
}

// ST_PageSetupOrientation ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PageSetupOrientation")
public class ST_PageSetupOrientation {
	protected String ST_PageSetupOrientation;
}

// CT_ExternalData ...
public class CT_ExternalData {
	@XmlAttribute(name = "r:id", required = true)
	protected String RIdAttr;
	@XmlElement(required = true, name = "autoUpdate")
	protected CT_Boolean AutoUpdate;
}

// CT_PageSetup ...
public class CT_PageSetup {
	@XmlAttribute(name = "paperSize")
	protected Integer PaperSizeAttr;
	@XmlAttribute(name = "paperHeight")
	protected String PaperHeightAttr;
	@XmlAttribute(name = "paperWidth")
	protected String PaperWidthAttr;
	@XmlAttribute(name = "firstPageNumber")
	protected Integer FirstPageNumberAttr;
	@XmlAttribute(name = "orientation")
	protected String OrientationAttr;
	@XmlAttribute(name = "blackAndWhite")
	protected Boolean BlackAndWhiteAttr;
	@XmlAttribute(name = "draft")
	protected Boolean DraftAttr;
	@XmlAttribute(name = "useFirstPageNumber")
	protected Boolean UseFirstPageNumberAttr;
	@XmlAttribute(name = "horizontalDpi")
	protected Integer HorizontalDpiAttr;
	@XmlAttribute(name = "verticalDpi")
	protected Integer VerticalDpiAttr;
	@XmlAttribute(name = "copies")
	protected Integer CopiesAttr;
}

// CT_PrintSettings ...
public class CT_PrintSettings {
	@XmlElement(required = true, name = "headerFooter")
	protected CT_HeaderFooter HeaderFooter;
	@XmlElement(required = true, name = "pageMargins")
	protected CT_PageMargins PageMargins;
	@XmlElement(required = true, name = "pageSetup")
	protected CT_PageSetup PageSetup;
}

// CT_ChartSpace ...
public class CT_ChartSpace {
	@XmlElement(required = true, name = "date1904")
	protected CT_Boolean Date1904;
	@XmlElement(required = true, name = "lang")
	protected CT_TextLanguageID Lang;
	@XmlElement(required = true, name = "roundedCorners")
	protected CT_Boolean RoundedCorners;
	@XmlElement(required = true, name = "style")
	protected CT_Style Style;
	@XmlElement(required = true, name = "clrMapOvr")
	protected CT_ColorMapping ClrMapOvr;
	@XmlElement(required = true, name = "pivotSource")
	protected CT_PivotSource PivotSource;
	@XmlElement(required = true, name = "protection")
	protected CT_Protection Protection;
	@XmlElement(required = true, name = "chart")
	protected CT_Chart Chart;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "txPr")
	protected CT_TextBody TxPr;
	@XmlElement(required = true, name = "externalData")
	protected CT_ExternalData ExternalData;
	@XmlElement(required = true, name = "printSettings")
	protected CT_PrintSettings PrintSettings;
	@XmlElement(required = true, name = "userShapes")
	protected CT_RelId UserShapes;
	@XmlElement(required = true, name = "extLst")
	protected CT_ExtensionList ExtLst;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "chartSpace")
public class ChartSpace {
	protected CT_ChartSpace ChartSpace;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "userShapes")
public class UserShapes {
	protected CT_Drawing UserShapes;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "chart")
public class Chart {
	protected CT_RelId Chart;
}
